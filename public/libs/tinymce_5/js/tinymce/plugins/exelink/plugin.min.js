/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 *
 * Version: 5.10.3 (2022-02-09)
 */
(function () {
    'use strict';

    let $ = tinymce.dom.DomQuery;

    let showFileInfo = false;
    let numeroLink = 0;
    let actualAnchorSandNode = '';
    let actualSize = '';

    let selectedLink = '';

    // window popup tab
    let jsPopUp = false;
    let urlPopUp = '';
    let namePopUp = '';
    let widthPopUp = '';
    let heightPopUp = '';
    let xPositionPopUp = '';
    let yPositionPopUp = '';
    let locationBarPopUp = false;
    let scrollbarsPopUp = false;
    let menuBarPopUp = false;
    let resizablePopUp = false;
    let toolbarsPopUp = false;
    let statusBarPopUp = false;
    let returnPopUp = true;

    // events tab
    let actualOnFocus = '';
    let actualOnBlur = '';
    let actualOnClick = '';
    let actualOnDBLClick = '';
    let actualOnMouseOver = '';
    let actualOnMouseMove = '';
    let actualOnMouseOut = '';

    function SetDefaultValues() {

        showFileInfo = false;
        actualAnchorSandNode = '';
        actualSize = '';

        selectedLink = '';

        // window popup tab
        jsPopUp = false;
        urlPopUp = '';
        namePopUp = '';
        widthPopUp = '';
        heightPopUp = '';
        xPositionPopUp = '';
        yPositionPopUp = '';
        locationBarPopUp = false;
        scrollbarsPopUp = false;
        menuBarPopUp = false;
        resizablePopUp = false;
        toolbarsPopUp = false;
        statusBarPopUp = false;
        returnPopUp = true;

        // events tab 
        actualOnFocus = '';
        actualOnBlur = '';
        actualOnClick = '';
        actualOnDBLClick = '';
        actualOnMouseOver = '';
        actualOnMouseMove = '';
        actualOnMouseOut = '';
    }

    function setDialogStyle() {
        let divDialog = $('div.tox-dialog').eq(0);
        tinymce.DOM.setStyles(divDialog, { 'width': 500 });

        let divBody = $('div.tox-dialog__body').eq(0);
        tinymce.DOM.setStyles(divBody, { 'display': 'grid', 'grid-template-columns': '1fr' });

        let divNavbar = $('div.tox-dialog__body-nav').eq(0);
        tinymce.DOM.removeClass(divNavbar, 'tox-dialog__body-nav');
        tinymce.DOM.setStyle(divNavbar, 'margin-top', 10);

        for (let i = 0; i < divNavbar.children().length; i++) {
            tinymce.DOM.setStyles(divNavbar.children().eq(i), { 'margin-left': 20 });
        }

        let divBodyContent = $('div.tox-dialog__body-content').eq(0);
        tinymce.DOM.setStyles(divBodyContent, { 'max-height': 450 });
    }

    function setAttribsGeneralTab() {

        let divs = $('div.tox-form__group');
        for (let i = 0; i < divs.length; i++) {
            tinymce.DOM.setStyles(divs.eq(i), { 'display': 'flex' });
            tinymce.DOM.setStyles(divs.eq(i).children().eq(0), { 'width': 200, 'padding': '8px 0' });
            tinymce.DOM.setStyles(divs.eq(i).children().eq(1), { 'display': 'flex', 'width': '100%' });
        }

        let inputFileSize = divs.eq(5).children().eq(1);
        let labelFileSize = divs.eq(5).children().eq(0);
        tinymce.DOM.setAttribs(labelFileSize, { 'for': 'inputFileSize' });
        tinymce.DOM.setAttribs(inputFileSize, { 'id': 'inputFileSize', 'readonly': 'readonly', 'original-size': actualSize });

        let listboxSizeUnit = divs.eq(6).children().eq(1);
        tinymce.DOM.setAttribs(listboxSizeUnit, { 'id': 'listboxSizeUnit', 'data-value': '' });

        let inputFileExtension = divs.eq(7).children().eq(1);
        let labelFileExtension = divs.eq(7).children().eq(0);
        tinymce.DOM.setAttribs(labelFileExtension, { 'for': 'inputFileExtension' });
        tinymce.DOM.setAttribs(inputFileExtension, { 'id': 'inputFileExtension', 'readonly': 'readonly' });

    }

    function setAttribsPopupTab() {

        let divs = $('div.tox-form').eq(0).children().eq(1).children();
        for (let i = 0; i < divs.length; i++) {
            if (i == 0) {
                tinymce.DOM.setStyles(divs.eq(i), { 'margin-top': 15 });
            }
            if (i < 4) {
                tinymce.DOM.setStyles(divs.eq(i), { 'display': 'flex' });
                tinymce.DOM.setStyles(divs.eq(i).children().eq(0), { 'width': 200, 'padding': '8px 0' });
                tinymce.DOM.setStyles(divs.eq(i).children().eq(1), { 'display': 'flex', 'width': '100%' });
            }
            if (i > 1 && i < 4) {
                for (let n = 0; n < divs.eq(i).children().eq(1).children().length; n++) {
                    tinymce.DOM.setStyles(divs.eq(i).children().eq(1).children().eq(n), { 'margin-right': 15 });
                    if (n == 0 || n == 2) {
                        tinymce.DOM.setAttribs(divs.eq(i).children().eq(1).children().eq(n).children().eq(0), { 'maxlength': 4, 'size': 3 });

                    } else if (n == 1) {
                        tinymce.DOM.setStyles(divs.eq(i).children().eq(1).children().eq(n).children().eq(0), { 'width': 8, 'padding': '8px 0', 'display': 'flex', 'justify-content': 'center', 'align-items': 'center' });
                    } else if (n == 3) {
                        tinymce.DOM.setStyles(divs.eq(i).children().eq(1).children().eq(n).children().eq(0), { 'padding': '8px 0' });
                    }
                }
            }
            if (i == 4) {
                tinymce.DOM.setStyles(divs.eq(i).children().eq(0), { 'font-weight': 'bold', 'margin-top': 15 });
            }
            if (i > 4) {
                tinymce.DOM.removeClass(divs.eq(i), 'tox-form__grid tox-form__grid--2col');
                tinymce.DOM.addClass(divs.eq(i), 'tox-form__group');
                tinymce.DOM.setStyles(divs.eq(i), { 'display': 'flex' });
                tinymce.DOM.setStyles(divs.eq(i).children().eq(0), { 'width': 200 });
            }

        }
    }

    function setAttribsEventsTab() {

        let divs = $('div.tox-form__group');
        for (let i = 0; i < divs.length; i++) {
            tinymce.DOM.setStyles(divs.eq(i), { 'display': 'flex' });
            tinymce.DOM.setStyles(divs.eq(i).children().eq(0), { 'width': 150, 'padding': '8px 0' });
            tinymce.DOM.setStyles(divs.eq(i).children().eq(1), { 'display': 'flex', 'width': '100%' });
        }

    }

    function setOpacityFileInfo() {
        let divs = $('div.tox-form__group');
        for (let i = 6; i < divs.length; i++) {
            if (showFileInfo) {
                tinymce.DOM.setStyles(divs.eq(i), { "opacity": "1" });
            } else {
                tinymce.DOM.setStyles(divs.eq(i), { "opacity": "0.2" });
            }
        }
    }

    function GetPopUpFields() {
        let popUpFields = [];

        popUpFields = [
            {
                type: 'input',
                name: 'popupurl',
                label: 'Popup URL',
                disabled: false
            },
            {
                type: 'input',
                name: 'popupname',
                label: 'Window Name',
                disabled: false
            },
            {
                type: 'panel',
                items: [
                    {
                        type: 'label',
                        label: _('Size'),
                        items: []
                    },
                    {
                        type: 'panel',
                        items: [
                            {
                                type: 'input',
                                name: 'popupwidth',
                                disabled: false
                            },
                            {
                                type: 'label',
                                label: 'x',
                                items: []
                            },
                            {
                                type: 'input',
                                name: 'popupheight',
                                disabled: false
                            },
                            {
                                type: 'label',
                                label: 'px',
                                items: []
                            }
                        ]
                    }
                ]
            },
            {
                type: 'panel',
                items: [
                    {
                        type: 'label',
                        label: _('Position (X/Y)'),
                        items: []
                    },
                    {
                        type: 'panel',
                        items: [
                            {
                                type: 'input',
                                name: 'popupleft',
                                disabled: false
                            },
                            {
                                type: 'label',
                                label: '/',
                                items: []
                            },
                            {
                                type: 'input',
                                name: 'popuptop',
                                disabled: false
                            },
                            {
                                type: 'label',
                                label: 'c/c = Center',
                                items: []
                            }
                        ]
                    }
                ]
            },
            {
                type: 'label',
                name: 'options',
                label: 'Options',
                items: []
            },
            {
                type: 'grid',
                columns: 2,
                items: [
                    {
                        type: 'checkbox',
                        name: 'popuplocation',
                        label: 'Show Location Bar',
                        disabled: false
                    },
                    {
                        type: 'checkbox',
                        name: 'popupscrollbars',
                        label: 'Show Scrollbars',
                        disabled: false
                    }
                ]
            },
            {
                type: 'grid',
                columns: 2,
                items: [
                    {
                        type: 'checkbox',
                        name: 'popupmenubar',
                        label: 'Show Menu Bar',
                        disabled: false
                    },
                    {
                        type: 'checkbox',
                        name: 'popupresizable',
                        label: 'Make Window Resizable',
                        disabled: false
                    }
                ]
            },
            {
                type: 'grid',
                columns: 2,
                items: [
                    {
                        type: 'checkbox',
                        name: 'popuptoolbar',
                        label: 'Show Toolbars',
                        disabled: false
                    },
                    {
                        type: 'checkbox',
                        name: 'popupstatus',
                        label: 'Show Status Bar',
                        disabled: false
                    }
                ]
            },
            {
                type: 'panel',
                items: [
                    {
                        type: 'checkbox',
                        name: 'popupreturn',
                        label: "Insert 'return false'",
                        disabled: false
                    }
                ]
            }
        ]
        // }

        return popUpFields;
    }

    var global$7 = tinymce.util.Tools.resolve('tinymce.PluginManager');

    var global$6 = tinymce.util.Tools.resolve('tinymce.util.VK');

    var typeOf = function (x) {
        var t = typeof x;
        if (x === null) {
            return 'null';
        } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {
            return 'array';
        } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {
            return 'string';
        } else {
            return t;
        }
    };
    var isType = function (type) {
        return function (value) {
            return typeOf(value) === type;
        };
    };
    var isSimpleType = function (type) {
        return function (value) {
            return typeof value === type;
        };
    };
    var eq = function (t) {
        return function (a) {
            return t === a;
        };
    };
    var isString = isType('string');
    var isArray = isType('array');
    var isNull = eq(null);
    var isBoolean = isSimpleType('boolean');
    var isFunction = isSimpleType('function');

    var noop = function () {
    };
    var constant = function (value) {
        return function () {
            return value;
        };
    };
    var identity = function (x) {
        return x;
    };
    var tripleEquals = function (a, b) {
        return a === b;
    };
    var never = constant(false);
    var always = constant(true);

    var none = function () {
        return NONE;
    };
    var NONE = function () {
        var call = function (thunk) {
            return thunk();
        };
        var id = identity;
        var me = {
            fold: function (n, _s) {
                return n();
            },
            isSome: never,
            isNone: always,
            getOr: id,
            getOrThunk: call,
            getOrDie: function (msg) {
                throw new Error(msg || 'error: getOrDie called on none.');
            },
            getOrNull: constant(null),
            getOrUndefined: constant(undefined),
            or: id,
            orThunk: call,
            map: none,
            each: noop,
            bind: none,
            exists: never,
            forall: always,
            filter: function () {
                return none();
            },
            toArray: function () {
                return [];
            },
            toString: constant('none()')
        };
        return me;
    }();
    var some = function (a) {
        var constant_a = constant(a);
        var self = function () {
            return me;
        };
        var bind = function (f) {
            return f(a);
        };
        var me = {
            fold: function (n, s) {
                return s(a);
            },
            isSome: always,
            isNone: never,
            getOr: constant_a,
            getOrThunk: constant_a,
            getOrDie: constant_a,
            getOrNull: constant_a,
            getOrUndefined: constant_a,
            or: self,
            orThunk: self,
            map: function (f) {
                return some(f(a));
            },
            each: function (f) {
                f(a);
            },
            bind: bind,
            exists: bind,
            forall: bind,
            filter: function (f) {
                return f(a) ? me : NONE;
            },
            toArray: function () {
                return [a];
            },
            toString: function () {
                return 'some(' + a + ')';
            }
        };
        return me;
    };
    var from = function (value) {
        return value === null || value === undefined ? NONE : some(value);
    };
    var Optional = {
        some: some,
        none: none,
        from: from
    };

    var nativeIndexOf = Array.prototype.indexOf;
    var nativePush = Array.prototype.push;
    var rawIndexOf = function (ts, t) {
        return nativeIndexOf.call(ts, t);
    };
    var contains = function (xs, x) {
        return rawIndexOf(xs, x) > -1;
    };
    var map = function (xs, f) {
        var len = xs.length;
        var r = new Array(len);
        for (var i = 0; i < len; i++) {
            var x = xs[i];
            r[i] = f(x, i);
        }
        return r;
    };
    var each$1 = function (xs, f) {
        for (var i = 0, len = xs.length; i < len; i++) {
            var x = xs[i];
            f(x, i);
        }
    };
    var foldl = function (xs, f, acc) {
        each$1(xs, function (x, i) {
            acc = f(acc, x, i);
        });
        return acc;
    };
    var flatten = function (xs) {
        var r = [];
        for (var i = 0, len = xs.length; i < len; ++i) {
            if (!isArray(xs[i])) {
                throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);
            }
            nativePush.apply(r, xs[i]);
        }
        return r;
    };
    var bind = function (xs, f) {
        return flatten(map(xs, f));
    };
    var findMap = function (arr, f) {
        for (var i = 0; i < arr.length; i++) {
            var r = f(arr[i], i);
            if (r.isSome()) {
                return r;
            }
        }
        return Optional.none();
    };

    var is = function (lhs, rhs, comparator) {
        if (comparator === void 0) {
            comparator = tripleEquals;
        }
        return lhs.exists(function (left) {
            return comparator(left, rhs);
        });
    };
    var cat = function (arr) {
        var r = [];
        var push = function (x) {
            r.push(x);
        };
        for (var i = 0; i < arr.length; i++) {
            arr[i].each(push);
        }
        return r;
    };
    var someIf = function (b, a) {
        return b ? Optional.some(a) : Optional.none();
    };

    var assumeExternalTargets = function (editor) {
        var externalTargets = editor.getParam('link_assume_external_targets', false);
        if (isBoolean(externalTargets) && externalTargets) {
            return 1;
        } else if (isString(externalTargets) && (externalTargets === 'http' || externalTargets === 'https')) {
            return externalTargets;
        }
        return 0;
    };
    var hasContextToolbar = function (editor) {
        return editor.getParam('link_context_toolbar', false, 'boolean');
    };
    var getLinkList = function (editor) {
        return editor.getParam('link_list');
    };
    var getDefaultLinkTarget = function (editor) {
        return editor.getParam('default_link_target');
    };
    var getTargetList = function (editor) {
        return editor.getParam('target_list', true);
    };
    var getRelList = function (editor) {
        return editor.getParam('rel_list', [], 'array');
    };
    var getLinkClassList = function (editor) {
        return editor.getParam('link_class_list', [], 'array');
    };
    var shouldShowLinkTitle = function (editor) {
        return editor.getParam('link_title', true, 'boolean');
    };
    var allowUnsafeLinkTarget = function (editor) {
        return editor.getParam('allow_unsafe_link_target', false, 'boolean');
    };
    var useQuickLink = function (editor) {
        return editor.getParam('link_quicklink', false, 'boolean');
    };
    var getDefaultLinkProtocol = function (editor) {
        return editor.getParam('link_default_protocol', 'http', 'string');
    };

    var global$5 = tinymce.util.Tools.resolve('tinymce.util.Tools');

    var getValue = function (item) {
        return isString(item.value) ? item.value : '';
    };
    var getText = function (item) {
        if (isString(item.text)) {
            return item.text;
        } else if (isString(item.title)) {
            return item.title;
        } else {
            return '';
        }
    };
    var sanitizeList = function (list, extractValue) {
        var out = [];
        global$5.each(list, function (item) {
            var text = getText(item);
            if (item.menu !== undefined) {
                var items = sanitizeList(item.menu, extractValue);
                out.push({
                    text: text,
                    items: items
                });
            } else {
                var value = extractValue(item);
                out.push({
                    text: text,
                    value: value
                });
            }
        });
        return out;
    };
    var sanitizeWith = function (extracter) {
        if (extracter === void 0) {
            extracter = getValue;
        }
        return function (list) {
            return Optional.from(list).map(function (list) {
                return sanitizeList(list, extracter);
            });
        };
    };
    var sanitize = function (list) {
        return sanitizeWith(getValue)(list);
    };
    var createUi = function (name, label) {
        return function (items) {
            return {
                name: name,
                type: 'listbox',
                label: label,
                items: items
            };
        };
    };
    var ListOptions = {
        sanitize: sanitize,
        sanitizeWith: sanitizeWith,
        createUi: createUi,
        getValue: getValue
    };

    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    var keys = Object.keys;
    var hasOwnProperty = Object.hasOwnProperty;
    var each = function (obj, f) {
        var props = keys(obj);
        for (var k = 0, len = props.length; k < len; k++) {
            var i = props[k];
            var x = obj[i];
            f(x, i);
        }
    };
    var objAcc = function (r) {
        return function (x, i) {
            r[i] = x;
        };
    };
    var internalFilter = function (obj, pred, onTrue, onFalse) {
        var r = {};
        each(obj, function (x, i) {
            (pred(x, i) ? onTrue : onFalse)(x, i);
        });
        return r;
    };
    var filter = function (obj, pred) {
        var t = {};
        internalFilter(obj, pred, objAcc(t), noop);
        return t;
    };
    var has = function (obj, key) {
        return hasOwnProperty.call(obj, key);
    };
    var hasNonNullableKey = function (obj, key) {
        return has(obj, key) && obj[key] !== undefined && obj[key] !== null;
    };

    var global$4 = tinymce.util.Tools.resolve('tinymce.dom.TreeWalker');

    var global$3 = tinymce.util.Tools.resolve('tinymce.util.URI');

    var isAnchor = function (elm) {
        return elm && elm.nodeName.toLowerCase() === 'a';
    };
    var isLink = function (elm) {
        return isAnchor(elm) && !!getHref(elm);
    };
    var collectNodesInRange = function (rng, predicate) {
        if (rng.collapsed) {
            return [];
        } else {
            var contents = rng.cloneContents();
            var walker = new global$4(contents.firstChild, contents);
            var elements = [];
            var current = contents.firstChild;
            do {
                if (predicate(current)) {
                    elements.push(current);
                }
            } while (current = walker.next());
            return elements;
        }
    };
    var hasProtocol = function (url) {
        return /^\w+:/i.test(url);
    };
    var getHref = function (elm) {
        var href = elm.getAttribute('data-mce-href');
        return href ? href : elm.getAttribute('href');
    };
    var applyRelTargetRules = function (rel, isUnsafe) {
        var rules = ['noopener'];
        var rels = rel ? rel.split(/\s+/) : [];
        var toString = function (rels) {
            return global$5.trim(rels.sort().join(' '));
        };
        var addTargetRules = function (rels) {
            rels = removeTargetRules(rels);
            return rels.length > 0 ? rels.concat(rules) : rules;
        };
        var removeTargetRules = function (rels) {
            return rels.filter(function (val) {
                return global$5.inArray(rules, val) === -1;
            });
        };
        var newRels = isUnsafe ? addTargetRules(rels) : removeTargetRules(rels);
        return newRels.length > 0 ? toString(newRels) : '';
    };
    var trimCaretContainers = function (text) {
        return text.replace(/\uFEFF/g, '');
    };
    var getAnchorElement = function (editor, selectedElm) {
        selectedElm = selectedElm || editor.selection.getNode();
        if (isImageFigure(selectedElm)) {
            return editor.dom.select('a[href]', selectedElm)[0];
        } else {
            return editor.dom.getParent(selectedElm, 'a[href]');
        }
    };
    var getAnchorText = function (selection, anchorElm) {
        var text = anchorElm ? anchorElm.innerText || anchorElm.textContent : selection.getContent({ format: 'text' });
        return trimCaretContainers(text);
    };
    var hasLinks = function (elements) {
        return global$5.grep(elements, isLink).length > 0;
    };
    var hasLinksInSelection = function (rng) {
        return collectNodesInRange(rng, isLink).length > 0;
    };
    var isOnlyTextSelected = function (editor) {
        var inlineTextElements = editor.schema.getTextInlineElements();
        var isElement = function (elm) {
            return elm.nodeType === 1 && !isAnchor(elm) && !has(inlineTextElements, elm.nodeName.toLowerCase());
        };
        var elements = collectNodesInRange(editor.selection.getRng(), isElement);
        return elements.length === 0;
    };
    var isImageFigure = function (elm) {
        return elm && elm.nodeName === 'FIGURE' && /\bimage\b/i.test(elm.className);
    };
    var getLinkAttrs = function (data) {
        var attrs = [
            'title',
            'rel',
            'class',
            'target',
            'size'
        ];
        return foldl(attrs, function (acc, key) {
            if (key != "size") {
                data[key].each(function (value) {
                    acc[key] = value.length > 0 ? value : null;
                });
            }
            else {
                acc[key] = data[key];
            }
            return acc;
        }, { href: data.href });
    };
    var handleExternalTargets = function (href, assumeExternalTargets) {
        if ((assumeExternalTargets === 'http' || assumeExternalTargets === 'https') && !hasProtocol(href)) {
            return assumeExternalTargets + '://' + href;
        }
        return href;
    };
    var applyLinkOverrides = function (editor, linkAttrs) {
        var newLinkAttrs = __assign({}, linkAttrs);
        if (!(getRelList(editor).length > 0) && allowUnsafeLinkTarget(editor) === false) {
            var newRel = applyRelTargetRules(newLinkAttrs.rel, newLinkAttrs.target === '_blank');
            newLinkAttrs.rel = newRel ? newRel : null;
        }
        if (Optional.from(newLinkAttrs.target).isNone() && getTargetList(editor) === false) {
            newLinkAttrs.target = getDefaultLinkTarget(editor);
        }
        newLinkAttrs.href = handleExternalTargets(newLinkAttrs.href, assumeExternalTargets(editor));
        return newLinkAttrs;
    };
    var updateLink = function (editor, anchorElm, text, linkAttrs) {
        text.each(function (text) {
            if (has(anchorElm, 'innerText')) {
                anchorElm.innerText = text;
            } else {
                anchorElm.textContent = text;
            }
        });
        editor.dom.setAttribs(anchorElm, linkAttrs);
        editor.selection.select(anchorElm);
    };
    var createLink = function (editor, selectedElm, text, linkAttrs) {
        if (isImageFigure(selectedElm)) {
            linkImageFigure(editor, selectedElm, linkAttrs);
        } else {
            text.fold(function () {
                editor.execCommand('mceInsertLink', false, linkAttrs);
            }, function (text) {
                editor.insertContent(editor.dom.createHTML('a', linkAttrs, editor.dom.encode(text)));
            });
        }
    };
    var linkDomMutation = function (editor, attachState, data) {
        var selectedElm = editor.selection.getNode();
        var anchorElm = getAnchorElement(editor, selectedElm);
        var linkAttrs = applyLinkOverrides(editor, getLinkAttrs(data));
        editor.undoManager.transact(function () {
            if (data.href === attachState.href) {
                attachState.attach();
            }
            if (anchorElm) {
                editor.focus();
                updateLink(editor, anchorElm, data.text, linkAttrs);
            } else {
                createLink(editor, selectedElm, data.text, linkAttrs);
            }
        });
    };
    var unlinkSelection = function (editor) {
        var dom = editor.dom, selection = editor.selection;
        var bookmark = selection.getBookmark();
        var rng = selection.getRng().cloneRange();
        var startAnchorElm = dom.getParent(rng.startContainer, 'a[href]', editor.getBody());
        var endAnchorElm = dom.getParent(rng.endContainer, 'a[href]', editor.getBody());
        if (startAnchorElm) {
            rng.setStartBefore(startAnchorElm);
        }
        if (endAnchorElm) {
            rng.setEndAfter(endAnchorElm);
        }
        selection.setRng(rng);
        editor.execCommand('unlink');
        selection.moveToBookmark(bookmark);
    };
    var unlinkDomMutation = function (editor) {
        editor.undoManager.transact(function () {
            var node = editor.selection.getNode();
            if (isImageFigure(node)) {
                unlinkImageFigure(editor, node);
            } else {
                unlinkSelection(editor);
            }
            editor.focus();
        });
    };
    var unwrapOptions = function (data) {
        var cls = data.class, href = data.href, rel = data.rel, target = data.target, text = data.text, title = data.title, size = data.size;
        return filter({
            class: cls.getOrNull(),
            href: href,
            rel: rel.getOrNull(),
            target: target.getOrNull(),
            text: text.getOrNull(),
            title: title.getOrNull(),
            size: size.getOrNull()
        }, function (v, _k) {
            return isNull(v) === false;
        });
    };
    var sanitizeData = function (editor, data) {
        var href = data.href;
        return __assign(__assign({}, data), { href: global$3.isDomSafe(href, 'a', editor.settings) ? href : '' });
    };
    var link = function (editor, attachState, data) {
        var sanitizedData = sanitizeData(editor, data);
        editor.hasPlugin('rtc', true) ? editor.execCommand('createlink', false, unwrapOptions(sanitizedData)) : linkDomMutation(editor, attachState, sanitizedData);
    };
    var unlink = function (editor) {
        editor.hasPlugin('rtc', true) ? editor.execCommand('unlink') : unlinkDomMutation(editor);
    };
    var unlinkImageFigure = function (editor, fig) {
        var img = editor.dom.select('img', fig)[0];
        if (img) {
            var a = editor.dom.getParents(img, 'a[href]', fig)[0];
            if (a) {
                a.parentNode.insertBefore(img, a);
                editor.dom.remove(a);
            }
        }
    };
    var linkImageFigure = function (editor, fig, attrs) {
        var img = editor.dom.select('img', fig)[0];
        if (img) {
            var a = editor.dom.create('a', attrs);
            img.parentNode.insertBefore(a, img);
            a.appendChild(img);
        }
    };

    var isListGroup = function (item) {
        return hasNonNullableKey(item, 'items');
    };
    var findTextByValue = function (value, catalog) {
        return findMap(catalog, function (item) {
            if (isListGroup(item)) {
                return findTextByValue(value, item.items);
            } else {
                return someIf(item.value === value, item);
            }
        });
    };
    var getDelta = function (persistentText, fieldName, catalog, data) {
        var value = data[fieldName];
        var hasPersistentText = persistentText.length > 0;
        return value !== undefined ? findTextByValue(value, catalog).map(function (i) {
            return {
                url: {
                    value: i.value,
                    meta: {
                        text: hasPersistentText ? persistentText : i.text,
                        attach: noop
                    }
                },
                text: hasPersistentText ? persistentText : i.text
            };
        }) : Optional.none();
    };
    var findCatalog = function (catalogs, fieldName) {
        if (fieldName === 'link') {
            return catalogs.link;
        } else if (fieldName === 'anchor') {
            return catalogs.anchor;
        } else {
            return Optional.none();
        }
    };
    var init = function (initialData, linkCatalog) {
        var persistentData = {
            text: initialData.text,
            title: initialData.title,
            size: initialData.size
        };
        var getTitleFromUrlChange = function (url) {
            return someIf(persistentData.title.length <= 0, Optional.from(url.meta.title).getOr(''));
        };
        var getTextFromUrlChange = function (url) {
            return someIf(persistentData.text.length <= 0, Optional.from(url.meta.text).getOr(url.value));
        };

        var onUrlChange = function (data) {
            var text = getTextFromUrlChange(data.url);
            var title = getTitleFromUrlChange(data.url);
            if (text.isSome() || title.isSome()) {
                return Optional.some(__assign(__assign({}, text.map(function (text) {
                    return { text: text };
                }).getOr({})), title.map(function (title) {
                    return { title: title };
                }).getOr({})));
            } else {
                return Optional.none();
            }

        };
        var onCatalogChange = function (data, change) {
            var catalog = findCatalog(linkCatalog, change.name).getOr([]);
            return getDelta(persistentData.text, change.name, catalog, data);
        };
        var onChange = function (getData, change) {
            var name = change.name;
            if (name === 'url') {
                return onUrlChange(getData());
            } else if (contains([
                'anchor',
                'link'
            ], name)) {
                return onCatalogChange(getData(), change);
            } else if (name === 'text' || name === 'title') {
                persistentData[name] = getData()[name];
                return Optional.none();
            } else {
                return Optional.none();
            }
        };
        return { onChange: onChange };
    };
    var DialogChanges = {
        init: init,
        getDelta: getDelta
    };

    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Delay');

    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Promise');

    var delayedConfirm = function (editor, message, callback) {
        var rng = editor.selection.getRng();
        global$2.setEditorTimeout(editor, function () {
            editor.windowManager.confirm(message, function (state) {
                editor.selection.setRng(rng);
                callback(state);
            });
        });
    };
    var tryEmailTransform = function (data) {
        var url = data.href;
        var suggestMailTo = url.indexOf('@') > 0 && url.indexOf('/') === -1 && url.indexOf('mailto:') === -1;
        return suggestMailTo ? Optional.some({
            message: 'The URL you entered seems to be an email address. Do you want to add the required mailto: prefix?',
            preprocess: function (oldData) {
                return __assign(__assign({}, oldData), { href: 'mailto:' + url });
            }
        }) : Optional.none();
    };
    var tryProtocolTransform = function (assumeExternalTargets, defaultLinkProtocol) {
        return function (data) {
            var url = data.href;
            var suggestProtocol = assumeExternalTargets === 1 && !hasProtocol(url) || assumeExternalTargets === 0 && /^\s*www(\.|\d\.)/i.test(url);
            return suggestProtocol ? Optional.some({
                message: 'The URL you entered seems to be an external link. Do you want to add the required ' + defaultLinkProtocol + ':// prefix?',
                preprocess: function (oldData) {
                    return __assign(__assign({}, oldData), { href: defaultLinkProtocol + '://' + url });
                }
            }) : Optional.none();
        };
    };
    var preprocess = function (editor, data) {
        return findMap([
            tryEmailTransform,
            tryProtocolTransform(assumeExternalTargets(editor), getDefaultLinkProtocol(editor))
        ], function (f) {
            return f(data);
        }).fold(function () {
            return global$1.resolve(data);
        }, function (transform) {
            return new global$1(function (callback) {
                delayedConfirm(editor, transform.message, function (state) {
                    callback(state ? transform.preprocess(data) : data);
                });
            });
        });
    };
    var DialogConfirms = { preprocess: preprocess };

    var getAnchors = function (editor) {
        var anchorNodes = editor.dom.select('a:not([href])');
        var anchors = bind(anchorNodes, function (anchor) {
            var id = anchor.name || anchor.id;
            return id ? [{
                text: id,
                value: '#' + id
            }] : [];
        });
        return anchors.length > 0 ? Optional.some([{
            text: 'None',
            value: ''
        }].concat(anchors)) : Optional.none();
    };
    var AnchorListOptions = { getAnchors: getAnchors };

    var getClasses = function (editor) {
        var list = getLinkClassList(editor);
        if (list.length > 0) {
            return ListOptions.sanitize(list);
        }
        return Optional.none();
    };
    var ClassListOptions = { getClasses: getClasses };

    var global = tinymce.util.Tools.resolve('tinymce.util.XHR');

    var parseJson = function (text) {
        try {
            return Optional.some(JSON.parse(text));
        } catch (err) {
            return Optional.none();
        }
    };
    var getLinks = function (editor) {
        var extractor = function (item) {
            return editor.convertURL(item.value || item.url, 'href');
        };
        var linkList = getLinkList(editor);
        return new global$1(function (callback) {
            if (isString(linkList)) {
                global.send({
                    url: linkList,
                    success: function (text) {
                        return callback(parseJson(text));
                    },
                    error: function (_) {
                        return callback(Optional.none());
                    }
                });
            } else if (isFunction(linkList)) {
                linkList(function (output) {
                    return callback(Optional.some(output));
                });
            } else {
                callback(Optional.from(linkList));
            }
        }).then(function (optItems) {
            return optItems.bind(ListOptions.sanitizeWith(extractor)).map(function (items) {
                if (items.length > 0) {
                    var noneItem = [{
                        text: 'None',
                        value: ''
                    }];
                    return noneItem.concat(items);
                } else {
                    return items;
                }
            });
        });
    };
    var LinkListOptions = { getLinks: getLinks };

    var getRels = function (editor, initialTarget) {
        var list = getRelList(editor);
        if (list.length > 0) {
            var isTargetBlank_1 = is(initialTarget, '_blank');
            var enforceSafe = allowUnsafeLinkTarget(editor) === false;
            var safeRelExtractor = function (item) {
                return applyRelTargetRules(ListOptions.getValue(item), isTargetBlank_1);
            };
            var sanitizer = enforceSafe ? ListOptions.sanitizeWith(safeRelExtractor) : ListOptions.sanitize;
            return sanitizer(list);
        }
        return Optional.none();
    };
    var RelOptions = { getRels: getRels };

    var fallbacks = [
        {
            text: 'Current window',
            value: ''
        },
        {
            text: 'New window',
            value: '_blank'
        }
    ];
    var getTargets = function (editor) {
        var list = getTargetList(editor);
        if (isArray(list)) {
            return ListOptions.sanitize(list).orThunk(function () {
                return Optional.some(fallbacks);
            });
        } else if (list === false) {
            return Optional.none();
        }
        return Optional.some(fallbacks);
    };
    var TargetOptions = { getTargets: getTargets };

    var nonEmptyAttr = function (dom, elem, name) {
        var val = dom.getAttrib(elem, name);
        return val !== null && val.length > 0 ? Optional.some(val) : Optional.none();
    };
    var extractFromAnchor = function (editor, anchor) {
        var dom = editor.dom;
        var onlyText = isOnlyTextSelected(editor);
        var text = onlyText ? Optional.some(getAnchorText(editor.selection, anchor)) : Optional.none();
        var url = anchor ? Optional.some(dom.getAttrib(anchor, 'href')) : Optional.none();
        var target = anchor ? Optional.from(dom.getAttrib(anchor, 'target')) : Optional.none();
        var rel = nonEmptyAttr(dom, anchor, 'rel');
        var linkClass = nonEmptyAttr(dom, anchor, 'class');
        var title = nonEmptyAttr(dom, anchor, 'title');

        if (title != Optional.none()) {
            let id = nonEmptyAttr(dom, anchor, 'id');

            id = id.toString().replace('some(', '').replace(')', '');

            actualSize = tinymce.activeEditor.dom.getAttrib(id, "size");

            selectedLink = id.toString().replace('some(link_', '').replace(')', '');

            let fileInfo = editor.dom.getOuterHTML('info_file_' + selectedLink.replace('link_', ''));
            if (fileInfo) {
                showFileInfo = true;
            }
        } else {
            showFileInfo = false;
        }

        if (url != Optional.none()) {
            let id = nonEmptyAttr(dom, anchor, 'id');

            selectedLink = id.toString().replace('some(link_', '').replace(')', '');
            selectedLink = 'link_' + selectedLink;

            let fullOnClick = editor.dom.getAttrib(selectedLink, 'onclick', '');
            if (fullOnClick.includes('window.open')) {
                jsPopUp = true;

                let onClickArray = fullOnClick.split(';');
                onClickArray.splice(onClickArray.length - 1, 1);

                let onClickLength = onClickArray.length;

                // checkbox insert return false
                if (onClickArray[onClickLength - 1] === 'return false') {
                    returnPopUp = true;
                } else {
                    returnPopUp = false;
                }

                // onclick value events tab
                if (onClickLength > 2) {
                    actualOnClick = onClickArray[onClickLength - 2];
                }

                let onClickPopUp = onClickArray[0].replace('window.open(', '').slice(0, -1);
                onClickPopUp = onClickPopUp.replaceAll('(', '').replaceAll(')', '').replaceAll('+', '').replaceAll("'", '');

                let ocPUArray = onClickPopUp.split(',');

                // url pop up
                if (ocPUArray[0] === 'this.href') {
                    urlPopUp = '';
                } else {
                    urlPopUp = ocPUArray[0];
                }

                // name window pop up
                if (ocPUArray[1] === 'eXeLearningPopup') {
                    namePopUp = '';
                } else {
                    namePopUp = ocPUArray[1];
                }

                // Find popup values
                for (let i = 2; i < ocPUArray.length; i++) {
                    // tamaño ancho
                    if (ocPUArray[i].includes('width=')) {
                        widthPopUp = ocPUArray[i].replace('width=', '');
                    }
                    //tamaño alto
                    else if (ocPUArray[i].includes('height=')) {
                        heightPopUp = ocPUArray[i].replace('height=', '');
                    }
                    // posicion x
                    else if (ocPUArray[i].includes('left=')) {
                        xPositionPopUp = ocPUArray[i].replace('left=', '');
                        if (xPositionPopUp.includes('screen.availWidth/2')) {
                            xPositionPopUp = 'c';
                        }
                    }
                    // posicion y
                    else if (ocPUArray[i].includes('top=')) {
                        yPositionPopUp = ocPUArray[i].replace('top=', '');
                        if (yPositionPopUp.includes('screen.availHeight/2')) {
                            yPositionPopUp = 'c';
                        }
                    }
                    // locationBarPopUp 
                    else if (ocPUArray[i].includes('location')) {
                        locationBarPopUp = true;
                    }
                    // scrollbarsPopUp 
                    else if (ocPUArray[i].includes('scrollbars')) {
                        scrollbarsPopUp = true;
                    }
                    // menuBarPopUp 
                    else if (ocPUArray[i].includes('menubar')) {
                        menuBarPopUp = true;
                    }
                    // resizablePopUp 
                    else if (ocPUArray[i].includes('resizable')) {
                        resizablePopUp = true;
                    }
                    // toolbarsPopUp 
                    else if (ocPUArray[i].includes('toolbar')) {
                        toolbarsPopUp = true;
                    }
                    // statusBarPopUp 
                    else if (ocPUArray[i].includes('status')) {
                        statusBarPopUp = true;
                    }
                }
            } else {
                jsPopUp = false;
                actualOnClick = fullOnClick;

            }

            //Events values
            actualOnFocus = editor.dom.getAttrib(selectedLink, 'onfocus', '');
            actualOnBlur = editor.dom.getAttrib(selectedLink, 'onblur', '');
            actualOnDBLClick = editor.dom.getAttrib(selectedLink, 'ondblclick', '');
            actualOnMouseOver = editor.dom.getAttrib(selectedLink, 'onmouseover', '');
            actualOnMouseMove = editor.dom.getAttrib(selectedLink, 'onmousemove', '');
            actualOnMouseOut = editor.dom.getAttrib(selectedLink, 'onmouseout', '');
        }

        return {
            url: url,
            text: text,
            title: title,
            target: target,
            rel: rel,
            linkClass: linkClass
        };
    };
    var collect = function (editor, linkNode) {
        return LinkListOptions.getLinks(editor).then(function (links) {
            var anchor = extractFromAnchor(editor, linkNode);
            return {
                anchor: anchor,
                catalogs: {
                    targets: TargetOptions.getTargets(editor),
                    rels: RelOptions.getRels(editor, anchor.target),
                    classes: ClassListOptions.getClasses(editor),
                    anchor: AnchorListOptions.getAnchors(editor),
                    link: links
                },
                optNode: Optional.from(linkNode),
                flags: { titleEnabled: shouldShowLinkTitle(editor) }
            };
        });
    };
    var DialogInfo = { collect: collect };

    var handleSubmit = function (editor, info) {
        return function (api) {

            var data = api.getData();
            if (!data.url.value) {
                unlink(editor);
                api.close();
                return;
            }
            var getChangedValue = function (key) {
                return Optional.from(data[key]).filter(function (value) {
                    return !is(info.anchor[key], value);
                });
            };
            var changedData = {
                href: data.url.value,
                text: getChangedValue('text'),
                target: getChangedValue('target'),
                rel: getChangedValue('rel'),
                class: getChangedValue('linkClass'),
                title: getChangedValue('title'),
                size: data.url.meta.size
            };
            var attachState = {
                href: data.url.value,
                attach: data.url.meta !== undefined && data.url.meta.attach ? data.url.meta.attach : noop
            };
            DialogConfirms.preprocess(editor, changedData).then(function (pData) {
                link(editor, attachState, pData);
            });

            //Add href value
            let href = data.url.value;
            let fileSize = api.getData().fileInfoSize;
            let fileUnit = api.getData().fileInfoUnit;
            let fileExtension = api.getData().fileInfoExtension;
            let addToTitle = '[' + fileExtension + ' - ' + fileSize + ' ' + fileUnit + ']';
            let newTitle = api.getData().title + ' ' + addToTitle;
            let innerHTMLSpan = '(' + fileExtension + ' - ' + fileSize + ' <abbr title=' + GetUnitText(fileUnit) + '>' + fileUnit + '</abbr> )';

            // let newLink;

            let linkData = api.getData().anchorsandnodes;

            // // get onclick event data
            // let onClick = api.getData().onclick;

            if (linkData !== 'exe-package:elp' && linkData !== 'exe-node:Inicio#auto_top') {
                linkData = data.url.value;
            }

            if (showFileInfo && fileExtension == "") {
                tinymce.activeEditor.windowManager.alert('"File extension" is empty');
                return false;
            }

            // Remove span elmentes in empty p
            let pElem = editor.dom.select('p');
            for (var i = 0; i < pElem.length; i++) {
                if (pElem[i].textContent.trim() === '' && pElem[i].childNodes[0].nodeName === 'SPAN') {
                    editor.dom.setOuterHTML(pElem[i], '<p><br data-mce-bogus="1"></p>');
                }
            }

            // Timer to access  to <a> element, not best choice
            setTimeout(() => {
                updateLinkNumber();
                let linkToChange = editor.selection.getNode();

                linkToChange = getAnchorNode(linkToChange);

                if (linkToChange.id === null || linkToChange.id === '') {
                    linkToChange.id = 'link_' + numeroLink;

                    addEvents(editor, api, linkToChange);
                    // Window
                    if (jsPopUp) {
                        addJsPopUpBehaviour(editor, api, href, linkToChange);
                    }

                    //Add file info when checkbox is selected
                    if (showFileInfo && fileSize != '') {
                        linkToChange.title = newTitle;
                        var el = editor.dom.create('span', { id: 'info_file_' + numeroLink, 'class': 'exe-link-data file-size' }, innerHTMLSpan);
                        editor.selection.select(editor.dom.get(linkToChange.id));
                        editor.selection.getNode().after(el);
                        // editor.selection.setNode(el);
                    }

                    numeroLink++;
                    // }
                }
                else {
                    let id_span = 'info_file_' + linkToChange.id.replace('link_', '');
                    let span = editor.dom.get(id_span);

                    if (showFileInfo && fileSize != '') {
                        //Change link title
                        linkToChange.title = newTitle;

                        let newSpanHTML = '<span id=' + id_span + ' class="exe-link-data file-size">(' + fileExtension
                            + ' - ' + fileSize + ' <abbr title=' + GetUnitText(fileUnit) + '>' + fileUnit + '</abbr> )</span>';

                        if (span != null) {
                            //Change info file data
                            editor.dom.setOuterHTML(span, newSpanHTML);
                        } else {
                            //Make span data
                            let linkOuterHTML = editor.dom.getOuterHTML(linkToChange.id);

                            let link = editor.dom.get(linkToChange.id);
                            let newLinkOuterHTML = linkOuterHTML + newSpanHTML;
                            editor.dom.setOuterHTML(link, newLinkOuterHTML);
                        }
                    }
                    else {
                        //Remove span
                        linkToChange.title = api.getData().title;
                        editor.dom.setOuterHTML(span, '');
                    }

                    addEvents(editor, api, linkToChange);

                    // Window
                    if (jsPopUp) {
                        addJsPopUpBehaviour(editor, api, href, linkToChange);
                    }

                }
                addDownloadAttribute(editor, href);

            }, 200);

            api.close();
        };
    };

    function getAnchorNode(node) {
        const nodetype = node.nodeName;
        const nodes = {
          'P': node.children[0],
          'IMG': node.parentNode,
        };
      
        return nodes[nodetype] ?? node;
      }

    function addEvents(editor, api, link) {
        editor.dom.setAttrib(link, 'onfocus', api.getData().onfocus);
        editor.dom.setAttrib(link, 'onblur', api.getData().onblur);
        editor.dom.setAttrib(link, 'onclick', api.getData().onclick);
        editor.dom.setAttrib(link, 'ondblclick', api.getData().ondblclick);
        editor.dom.setAttrib(link, 'onmouseover', api.getData().onmouseover);
        editor.dom.setAttrib(link, 'onmousemove', api.getData().onmousemove);
        editor.dom.setAttrib(link, 'onmouseout', api.getData().onmouseout);
    };

    function addJsPopUpBehaviour(editor, api, href, link) {
        let onClick = api.getData().onclick;
        onClick = "window.open(";
        // Popup URL
        var popupURL = api.getData().popupurl;
        if (popupURL == "" || popupURL == "this.href") {
            onClick += "this.href";
        } else {
            if (href == "") {
                href = popupURL;
                data.href = href;
                onClick += "this.href";
            } else {
                onClick += "'" + popupURL + "'";
            }
        }
        // Popup name
        var popupName = api.getData().popupname;
        if (popupName == "") popupName = "eXeLearningPopup";
        onClick += ",'" + popupName + "'";
        // Options
        onClick += ",'";
        if (api.getData().popuplocation == true) onClick += "location=yes,";
        if (api.getData().popupscrollbars == true) onClick += "scrollbars=yes,";
        if (api.getData().popupmenubar == true) onClick += "menubar=yes,";
        if (api.getData().popupresizable == true) onClick += "resizable=yes,";
        if (api.getData().popuptoolbar == true) onClick += "toolbar=yes,";
        if (api.getData().popupstatus == true) onClick += "status=yes,";
        // Size
        var popupWidth = api.getData().popupwidth;
        if (popupWidth == "") popupWidth = 600;
        onClick += "width=" + popupWidth + ",";
        var popupHeight = api.getData().popupheight;
        if (popupHeight == "") popupHeight = 400;
        onClick += "height=" + popupHeight + ",";
        // Position
        var popupLeft = api.getData().popupleft;
        if (popupLeft != "" && popupLeft != "c") onClick += "left=" + popupLeft + ",";
        else onClick += "left='+(screen.availWidth/2-" + (popupWidth / 2) + ")+',";
        var popupTop = api.getData().popuptop;
        if (popupTop != "" && popupTop != "c") onClick += "top=" + popupTop + ",";
        else onClick += "top='+(screen.availHeight/2-" + (popupHeight / 2) + ")+',";
        // Close...
        if (onClick.charAt(onClick.length - 1) == ',') onClick = onClick.substring(0, onClick.length - 1);
        onClick += "');"

        // Other onclick events:
        onClick += api.getData().onclick;
        var lastChar = onClick.slice(-1);
        if (lastChar != ";") onClick += ";";

        // Return
        if (api.getData().popupreturn == true) onClick += 'return false;'

        editor.dom.setAttrib(link, 'onclick', onClick);
    };

    function addDownloadAttribute(editor, elementHref) {
        // Add download attribute to link if we want a link to download the elp
        if (elementHref === 'exe-package:elp') {
            let actualNode = editor.selection.getNode();
            editor.dom.setAttrib(actualNode, 'download', 'exe-package:elp-name');
        } else {
            let actualNode = editor.selection.getNode();
            if (editor.dom.getAttrib(actualNode, "download") === 'exe-package:elp-name') {
                editor.dom.setAttrib(actualNode, 'download', '');
            }
        }
    };

    function updateLinkNumber() {
        while (tinymce.activeEditor.dom.get('link_' + numeroLink) !== null) {
            numeroLink++;
        }
    };

    function GetUnitText(fileUnit) {
        if (fileUnit === 'B') {
            return 'Bytes';
        } else if (fileUnit === 'KB') {
            return 'KyloBytes';
        } else if (fileUnit === 'MB') {
            return 'MegaBytes';
        }
    };

    var collectData = function (editor) {
        var anchorNode = getAnchorElement(editor);
        return DialogInfo.collect(editor, anchorNode);
    };

    var getInitialData = function (info, defaultTarget, api) {
        let node = tinymce.activeEditor.selection.getNode();
        let nodeId = node.getAttribute("id");
        let infoSizeUnit = '';
        let infoSizeValue = '';
        let defaultSizeUnit = node.getAttribute("size") === null ? '' : node.getAttribute("size").split(' ').pop();
        let defaultSizeValue = node.getAttribute("size") === null ? '' : node.getAttribute("size").split(' ').shift();

        if (nodeId !== null) {
            let fileInfoId = 'info_file_' + nodeId.replace('link_', '');

            let fileInfoElement = tinymce.activeEditor.dom.get(fileInfoId);
            if (fileInfoElement) {
                infoSizeUnit = fileInfoElement.children[0].innerHTML;
                function getSize() {
                    if (infoSizeUnit === defaultSizeUnit) {
                        infoSizeValue = defaultSizeValue;
                    } else {
                        if (defaultSizeUnit === 'B') {
                            if (infoSizeUnit === 'KB') {
                                infoSizeValue = defaultSizeValue / 1024;
                            } else if (infoSizeUnit === 'MB') {
                                infoSizeValue = defaultSizeValue / 1024 / 1024;
                            }
                        } else if (defaultSizeUnit === 'KB') {
                            if (infoSizeUnit === 'B') {
                                infoSizeValue = defaultSizeValue * 1024;
                            } else if (infoSizeUnit === 'MB') {
                                infoSizeValue = defaultSizeValue / 1024;
                            }
                        } else if (defaultSizeUnit === 'MB') {
                            if (infoSizeUnit === 'B') {
                                infoSizeValue = defaultSizeValue * 1024 * 1024;
                            } else if (infoSizeUnit === 'KB') {
                                infoSizeValue = defaultSizeValue * 1024;
                            }
                        }
                        infoSizeValue = infoSizeValue.toFixed(2);
                    }
                }
                getSize();
            }
        }

        var anchor = info.anchor;
        var url = anchor.url.getOr('');
        let exeDefaultTarget = anchor.target.or(defaultTarget).getOr('');
        if (url === null || url === undefined || url === "") {
            exeDefaultTarget = "";
        }

        return {
            url: {
                value: url,
                meta: { original: { value: url } }
            },
            text: anchor.text.getOr(''),
            title: anchor.title.getOr('').split(' ').shift(),
            anchor: url,
            link: url,
            rel: anchor.rel.getOr(''),
            target: exeDefaultTarget,
            // target: anchor.target.or(defaultTarget).getOr(''),
            linkClass: anchor.linkClass.getOr(''),

            //file info
            includefileinfo: showFileInfo,
            anchorsandnodes: url,
            fileInfoSize: infoSizeUnit === '' ? defaultSizeValue : infoSizeValue,
            fileInfoUnit: infoSizeUnit === '' ? defaultSizeUnit : infoSizeUnit,
            fileInfoExtension: url === '' ? '' : url.split('.').pop(),

            //popup
            ispopup: jsPopUp,
            popupurl: urlPopUp,
            popupname: namePopUp,
            popupwidth: widthPopUp,
            popupheight: heightPopUp,
            popupleft: xPositionPopUp,
            popuptop: yPositionPopUp,
            popuplocation: locationBarPopUp,
            popupscrollbars: scrollbarsPopUp,
            popupmenubar: menuBarPopUp,
            popupresizable: resizablePopUp,
            popuptoolbar: toolbarsPopUp,
            popupstatus: statusBarPopUp,
            popupreturn: returnPopUp,

            //events
            onfocus: actualOnFocus,
            onblur: actualOnBlur,
            onclick: actualOnClick,
            ondblclick: actualOnDBLClick,
            onmouseover: actualOnMouseOver,
            onmousemove: actualOnMouseMove,
            onmouseout: actualOnMouseOut
        };
    };
    function FileInfoState(api) {
        setOpacityFileInfo();
        if (showFileInfo) {
            api.enable('fileInfoSize');
            api.enable('fileInfoUnit');
            api.enable('fileInfoExtension');
        } else {
            api.disable('fileInfoSize');
            api.disable('fileInfoUnit');
            api.disable('fileInfoExtension');
        }
    }
    var makeDialog = function (settings, onSubmit, editor) {
        var urlInput = [{
            name: 'url',
            type: 'urlinput',
            filetype: 'file',
            label: _('Source')
        }];
        let anchorSandNodes = [{
            type: 'listbox',
            name: 'anchorsandnodes',
            label: _("Anchors, nodes or .elp"),
            items: getAnchorList()
        }];
        let dataFile = [];
        if (showFileInfo) {
            dataFile = [
                {
                    name: 'includefileinfo',
                    type: 'checkbox',
                    label: _('Include File Information'),

                },
                {
                    type: 'input',
                    name: 'fileInfoSize',
                    label: 'File size',
                    inputMode: 'decimal',
                    disabled: false
                },
                {
                    type: 'listbox',
                    name: 'fileInfoUnit',
                    label: 'Unit',
                    items: [
                        { value: 'B', text: 'Bytes' },
                        { value: 'KB', text: 'KiloBytes' },
                        { value: 'MB', text: 'MegaBytes' }
                    ],
                    disabled: false
                },
                {
                    name: 'fileInfoExtension',
                    type: 'input',
                    label: 'File extension',
                    disabled: false
                }

            ]
        }
        else {
            dataFile = [
                {
                    name: 'includefileinfo',
                    type: 'checkbox',
                    label: _('Include File Information')
                },
                {
                    type: 'input',
                    name: 'fileInfoSize',
                    label: 'File size',
                    inputMode: 'decimal',
                    disabled: true
                },
                {
                    type: 'listbox',
                    name: 'fileInfoUnit',
                    label: 'Unit',
                    items: [
                        { value: 'B', text: 'Bytes' },
                        { value: 'KB', text: 'KiloBytes' },
                        { value: 'MB', text: 'MegaBytes' }
                    ],
                    disabled: true
                },
                {
                    name: 'fileInfoExtension',
                    type: 'input',
                    label: 'File extension',
                    disabled: true
                }

            ]
        }
        var displayText = settings.anchor.text.map(function () {
            return {
                name: 'text',
                type: 'input',
                label: 'Text to display'
            };
        }).toArray();
        var titleText = settings.flags.titleEnabled ? [{
            name: 'title',
            type: 'input',
            label: 'Title'
        }] : [];
        var defaultTarget = Optional.from(getDefaultLinkTarget(editor));
        var initialData = getInitialData(settings, defaultTarget);
        var catalogs = settings.catalogs;
        var dialogDelta = DialogChanges.init(initialData, catalogs);
        var body = {
            type: 'tabpanel',
            tabs: [
                {
                    title: _('General'),
                    name: 'general',
                    items: flatten([
                        urlInput,
                        anchorSandNodes,
                        displayText,
                        titleText,
                        cat([
                            // catalogs.anchor.map(ListOptions.createUi('anchor', 'Anchors')),
                            catalogs.targets.map(ListOptions.createUi('target', 'Open link in...')),
                            catalogs.rels.map(ListOptions.createUi('rel', 'Rel')),
                            catalogs.link.map(ListOptions.createUi('link', 'Link list')),
                            catalogs.classes.map(ListOptions.createUi('linkClass', 'Class'))
                        ]),
                        dataFile
                    ])
                },
                {
                    title: _('Popup'),
                    name: 'popup',
                    items: [
                        {
                            type: 'checkbox',
                            name: 'ispopup',
                            label: 'JavaScript Popup'
                        },
                        {
                            type: 'panel',
                            // id: 'javascriptPopupForm',
                            name: 'javascriptPopupForm',
                            items: GetPopUpFields()
                        }
                    ]
                },
                {
                    title: 'Events',
                    name: 'events',
                    items: [
                        {
                            type: 'input',
                            name: 'onfocus',
                            label: 'onfocus'
                        },
                        {
                            type: 'input',
                            name: 'onblur',
                            label: 'onblur'
                        },
                        {
                            type: 'input',
                            name: 'onclick',
                            label: 'onclick'
                        },
                        {
                            type: 'input',
                            name: 'ondblclick',
                            label: 'ondblclick'
                        },
                        {
                            type: 'input',
                            name: 'onmouseover',
                            label: 'onmouseover'
                        },
                        {
                            type: 'input',
                            name: 'onmousemove',
                            label: 'onmousemove'
                        },
                        {
                            type: 'input',
                            name: 'onmouseout',
                            label: 'onmouseout'
                        }
                    ]
                }

            ]
        };
        return {
            title: 'Insert/Edit Link',
            size: 'normal',
            body: body,
            buttons: [
                {
                    type: 'cancel',
                    name: 'cancel',
                    text: 'Cancel'
                },
                {
                    type: 'submit',
                    name: 'save',
                    text: 'Save',
                    primary: true
                }
            ],
            size: 'medium',
            initialData: initialData,
            onTabChange: function (api, details) {
                if (details.newTabName === 'popup') {
                    // Obtenemos el div que contiene los campos que queremos ocultar
                    let popup = $('.tox-form').children().eq(1);
                    setAttribsPopupTab();
                    if (!jsPopUp) {
                        popup.hide();
                    }
                } else if (details.newTabName === 'general') {
                    setAttribsGeneralTab();
                    FileInfoState(api);
                } else if (details.newTabName === 'events') {
                    setAttribsEventsTab();
                }
            },
            onChange: function (api, _a) {
                var name = _a.name;
                dialogDelta.onChange(api.getData, { name: name }).each(function (newData) {
                    api.setData(newData);
                });
                // show popup js
                if (name === 'ispopup') {
                    jsPopUp = api.getData().ispopup;

                    let popup = $('.tox-form').children().eq(1);
                    if (jsPopUp) {
                        popup.show();
                    } else {
                        popup.hide();
                    }
                }
                // Values anchor sand nodes
                else if (name === 'anchorsandnodes') {
                    let temp = api.getData().url;
                    temp.value = api.getData().anchorsandnodes;

                    api.setData({ url: temp });
                }
                // data files
                else if (name === 'includefileinfo') {
                    showFileInfo = !showFileInfo;
                    FileInfoState(api);
                }
                else if (name === "url") {
                    let size = api.getData().url.meta.size;
                    if (size !== undefined) {
                        let sizeValue = size.split(' ').shift();
                        let sizeUnit = size.split(' ').pop();

                        api.setData({ "fileInfoUnit": sizeUnit });

                        api.setData({ "fileInfoSize": sizeValue });

                        let fileExtension = api.getData().url.meta.title.split('.').pop();
                        api.setData({ "fileInfoExtension": fileExtension });

                        let inputSize = $("#inputFileSize");
                        tinymce.DOM.setAttribs(inputSize, { 'original-size': size });
                    }
                }

                // file size b, kb, mb
                else if (name === 'fileInfoUnit') {
                    let selectedUnit = api.getData().fileInfoUnit;
                    recalcFileSize(selectedUnit, api);
                }
            },
            onSubmit: onSubmit,
            onClose: function (api) {
                setTimeout(() => {
                    SetDefaultValues();

                }, 200);
            }

        };

    };

    function recalcFileSize(unit, api) {
        let inputSize = $("#inputFileSize");
        let size = tinymce.DOM.getAttrib(inputSize, 'original-size');

        let sizeValue = parseFloat(size.split(' ').shift());
        let sizeUnit = size.split(' ').pop()

        if (sizeValue != '') {
            if (sizeUnit !== unit) {
                if (unit === 'B') {
                    if (sizeUnit === 'KB') {
                        sizeValue *= 1024;
                    } else if (sizeUnit === 'MB') {
                        sizeValue *= 1024 * 1024;
                    }
                } else if (unit === 'KB') {
                    if (sizeUnit === 'B') {
                        sizeValue /= 1024;
                    } else if (sizeUnit === 'MB') {
                        sizeValue *= 1024;
                    }
                } else if (unit === 'MB') {
                    if (sizeUnit === 'B') {
                        sizeValue /= (1024 * 1024);
                    } else if (sizeUnit === 'KB') {
                        sizeValue /= 1024;
                    }
                }
            }
        }

        api.setData({ fileInfoSize: sizeValue.toFixed(2) });
    }

    function getAnchorList() {

        var list = [
            { text: '---', value: '' },
            { text: _('Link to the elp file (it will be exported)'), value: 'exe-package:elp' }
        ];

        var ed = tinymce.activeEditor, nodes = ed.dom.select('a'), name, i, len, html = "";

        for (i = 0, len = nodes.length; i < len; i++) {
            if ((name = ed.dom.getAttrib(nodes[i], "name")) != "")
                list.push({ text: name, value: '#' + name });

            if ((name = nodes[i].id) != "" && !nodes[i].href)
                list.push({ text: name, value: '#' + name });
        }

        if (typeof tinymce_anchors == "object") {
            for (i = 0; i < tinymce_anchors.length; i++) {
                var n = tinymce_anchors[i].replace("exe-node:", _("Node") + ":");
                var checkN = n.split("#");
                if (checkN[1] == "auto_top") n = n.replace("#auto_top", "");
                n = decodeURIComponent(n);
                var newOption = { text: n, value: tinymce_anchors[i] };
                if (list.indexOf(newOption) == -1) list.push(newOption);
            }
        }

        let pages = eXeLearning.app.project.structure.data;

        pages.forEach(page => {
            if (page.pageId!='root') list.push({ text: page.pageName, value: `exe-node:${page.pageId}` });
        });

        return list;
    }

    var open$1 = function (editor) {
        showFileInfo = false;
        var data = collectData(editor);
        data.then(function (info) {
            var onSubmit = handleSubmit(editor, info);
            return makeDialog(info, onSubmit, editor);
        }).then(function (spec) {
            editor.windowManager.open(spec);
            // Apply visual style
            setAttribsGeneralTab();
            setOpacityFileInfo();
            setDialogStyle();
            // / Visual style
        });
    };

    var appendClickRemove = function (link, evt) {
        document.body.appendChild(link);
        link.dispatchEvent(evt);
        document.body.removeChild(link);
    };
    var open = function (url) {
        var link = document.createElement('a');
        link.target = '_blank';
        link.href = url;
        link.rel = 'noreferrer noopener';
        var evt = document.createEvent('MouseEvents');
        evt.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
        appendClickRemove(link, evt);
    };

    var getLink = function (editor, elm) {
        return editor.dom.getParent(elm, 'a[href]');
    };
    var getSelectedLink = function (editor) {
        return getLink(editor, editor.selection.getStart());
    };
    var hasOnlyAltModifier = function (e) {
        return e.altKey === true && e.shiftKey === false && e.ctrlKey === false && e.metaKey === false;
    };
    var gotoLink = function (editor, a) {
        if (a) {
            var href = getHref(a);
            if (/^#/.test(href)) {
                var targetEl = editor.$(href);
                if (targetEl.length) {
                    editor.selection.scrollIntoView(targetEl[0], true);
                }
            } else {
                open(a.href);
            }
        }
    };
    var openDialog = function (editor) {
        return function () {
            open$1(editor);
        };
    };
    var gotoSelectedLink = function (editor) {
        return function () {
            gotoLink(editor, getSelectedLink(editor));
        };
    };
    var setupGotoLinks = function (editor) {
        editor.on('click', function (e) {
            var link = getLink(editor, e.target);
            if (link && global$6.metaKeyPressed(e)) {
                e.preventDefault();
                gotoLink(editor, link);
            }
        });
        editor.on('keydown', function (e) {
            var link = getSelectedLink(editor);
            if (link && e.keyCode === 13 && hasOnlyAltModifier(e)) {
                e.preventDefault();
                gotoLink(editor, link);
            }
        });
    };
    var toggleState = function (editor, toggler) {
        editor.on('NodeChange', toggler);
        return function () {
            return editor.off('NodeChange', toggler);
        };
    };
    var toggleActiveState = function (editor) {
        return function (api) {
            var updateState = function () {
                return api.setActive(!editor.mode.isReadOnly() && getAnchorElement(editor, editor.selection.getNode()) !== null);
            };
            updateState();
            return toggleState(editor, updateState);
        };
    };
    var toggleEnabledState = function (editor) {
        return function (api) {
            var updateState = function () {
                return api.setDisabled(getAnchorElement(editor, editor.selection.getNode()) === null);
            };
            updateState();
            return toggleState(editor, updateState);
        };
    };
    var toggleUnlinkState = function (editor) {
        return function (api) {
            var hasLinks$1 = function (parents) {
                return hasLinks(parents) || hasLinksInSelection(editor.selection.getRng());
            };
            var parents = editor.dom.getParents(editor.selection.getStart());
            api.setDisabled(!hasLinks$1(parents));
            return toggleState(editor, function (e) {
                return api.setDisabled(!hasLinks$1(e.parents));
            });
        };
    };

    var register = function (editor) {
        editor.addCommand('mceLink', function () {
            if (useQuickLink(editor)) {
                editor.fire('contexttoolbar-show', { toolbarKey: 'quicklink' });
            } else {
                openDialog(editor)();
            }
        });
    };

    var setup = function (editor,url) {
        editor.addShortcut('Meta+K', '', function () {
            editor.execCommand('mceLink');
        });
		editor.on('init', function (e) {
			editor.dom.loadCSS(url + "/css/content.css");
		});		
    };

    var setupButtons = function (editor) {
        editor.ui.registry.addToggleButton('exelink', {
            icon: 'link',
            tooltip: 'Insert/edit link',
            onAction: openDialog(editor),
            onSetup: toggleActiveState(editor)
        });
        editor.ui.registry.addButton('openlink', {
            icon: 'new-tab',
            tooltip: 'Open link',
            onAction: gotoSelectedLink(editor),
            onSetup: toggleEnabledState(editor)
        });
        editor.ui.registry.addButton('unlink', {
            icon: 'unlink',
            tooltip: 'Remove link',
            onAction: function () {
                return unlink(editor);
            },
            onSetup: toggleUnlinkState(editor)
        });
    };
    var setupMenuItems = function (editor) {
        editor.ui.registry.addMenuItem('openlink', {
            text: 'Open link',
            icon: 'new-tab',
            onAction: gotoSelectedLink(editor),
            onSetup: toggleEnabledState(editor)
        });
        editor.ui.registry.addMenuItem('exelink', {
            icon: 'link',
            text: 'Link...',
            shortcut: 'Meta+K',
            onAction: openDialog(editor)
        });
        editor.ui.registry.addMenuItem('unlink', {
            icon: 'unlink',
            text: 'Remove link',
            onAction: function () {
                return unlink(editor);
            },
            onSetup: toggleUnlinkState(editor)
        });
    };
    var setupContextMenu = function (editor) {
        var inLink = 'exelink unlink openlink';
        var noLink = 'exelink';
        editor.ui.registry.addContextMenu('exelink', {
            update: function (element) {
                return hasLinks(editor.dom.getParents(element, 'a')) ? inLink : noLink;
            }
        });
    };
    var setupContextToolbars = function (editor) {
        var collapseSelectionToEnd = function (editor) {
            editor.selection.collapse(false);
        };
        var onSetupLink = function (buttonApi) {
            var node = editor.selection.getNode();
            buttonApi.setDisabled(!getAnchorElement(editor, node));
            return noop;
        };
        var getLinkText = function (value) {
            var anchor = getAnchorElement(editor);
            var onlyText = isOnlyTextSelected(editor);
            if (!anchor && onlyText) {
                var text = getAnchorText(editor.selection, anchor);
                return Optional.some(text.length > 0 ? text : value);
            } else {
                return Optional.none();
            }
        };
        editor.ui.registry.addContextForm('quicklink', {
            launch: {
                type: 'contextformtogglebutton',
                icon: 'link',
                tooltip: 'Link',
                onSetup: toggleActiveState(editor)
            },
            label: 'Link',
            predicate: function (node) {
                return !!getAnchorElement(editor, node) && hasContextToolbar(editor);
            },
            initValue: function () {
                var elm = getAnchorElement(editor);
                return !!elm ? getHref(elm) : '';
            },
            commands: [
                {
                    type: 'contextformtogglebutton',
                    icon: 'link',
                    tooltip: 'Link',
                    primary: true,
                    onSetup: function (buttonApi) {
                        var node = editor.selection.getNode();
                        buttonApi.setActive(!!getAnchorElement(editor, node));
                        return toggleActiveState(editor)(buttonApi);
                    },
                    onAction: function (formApi) {
                        var value = formApi.getValue();
                        var text = getLinkText(value);
                        var attachState = {
                            href: value,
                            attach: noop
                        };
                        link(editor, attachState, {
                            href: value,
                            text: text,
                            title: Optional.none(),
                            rel: Optional.none(),
                            target: Optional.none(),
                            class: Optional.none()
                        });
                        collapseSelectionToEnd(editor);
                        formApi.hide();
                    }
                },
                {
                    type: 'contextformbutton',
                    icon: 'unlink',
                    tooltip: 'Remove link',
                    onSetup: onSetupLink,
                    onAction: function (formApi) {
                        unlink(editor);
                        formApi.hide();
                    }
                },
                {
                    type: 'contextformbutton',
                    icon: 'new-tab',
                    tooltip: 'Open link',
                    onSetup: onSetupLink,
                    onAction: function (formApi) {
                        gotoSelectedLink(editor)();
                        formApi.hide();
                    }
                }
            ]
        });
    };

    function Plugin() {
        global$7.add('exelink', function (editor,url) {
            setupButtons(editor);
            setupMenuItems(editor);
            setupContextMenu(editor);
            setupContextToolbars(editor);
            setupGotoLinks(editor);
            register(editor);
            setup(editor,url);
        });
    }

    Plugin();

}());