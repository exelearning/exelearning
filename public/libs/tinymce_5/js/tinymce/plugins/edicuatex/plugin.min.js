/**
 * plugin.min.js
 *
 * Released under Attribution-ShareAlike 4.0 International License.
 * Author: Ignacio Gros (http://gros.es/) for http://exelearning.net/
 *
 * License: http://creativecommons.org/licenses/by-sa/4.0/
 *
 * Button icon by Google (https://fonts.google.com/icons), available under the Apache License, Version 2.0. (https://opensource.org/license/apache-2-0) 

 * It works with https://github.com/jjdeharo/edicuatex by @jjdeharo
 * Don't forget to set edicuatex_url in your editor settings
 */

/* eXeLearning / TinyMCE EdiCuaTeX plugin */
(function() {
    tinymce.PluginManager.add('edicuatex', function(editor, url) {

        var editorURL = editor.settings.edicuatex_url;
        if (typeof(editorURL) != "string") return;

        /* Button icon */
        editor.ui.registry.addIcon('edicuatex', '<svg xmlns="http://www.w3.org/2000/svg" height="20px" viewBox="0 -960 960 960" width="24px"><path d="M231.87-151.87v-90.52L490.2-480 231.87-717.37v-90.76h496.26v134.59H448.7L655.33-480 448.7-286.46h279.43v134.59H231.87Z"/></svg>');

        function isOldFormula(node) {
            var activate = false;
            var step1 = node.parentNode;
            if (node.nodeName == 'IMG') {
                if (step1 && (step1.nodeName == "P" || step1.nodeName == "SPAN") && editor.dom.getAttrib(step1, 'class').indexOf("exe-math-img") != -1) {
                    // Code and image
                    var step2 = step1.parentNode;
                    if (step2 && (step2.nodeName == "DIV" || step2.nodeName == "SPAN") && step2.className.indexOf("exe-math ") != -1) {
                        activate = true;
                    }
                } else {
                    // Check if the image was created using the old plugin (exemath)
                    var img = jQuery(node);
                    var exe_math_latex = img.attr("exe_math_latex");
                    if (exe_math_latex && exe_math_latex != "") {
                        activate = 'incompatible';
                    }
                }
            } else if (node.nodeName == 'DIV' || node.nodeName == 'SPAN') {
                var c = node.className;
                if (c.indexOf("exe-math") != -1 && c.indexOf("code-only") != -1) {
                    activate = true;
                }
            } else if (node.nodeName == 'P' || node.nodeName == 'SPAN') {
                if (step1 && (step1.nodeName == "DIV" || step1.nodeName == "SPAN") && editor.dom.getAttrib(step1, 'class').indexOf("exe-math") != -1) {
                    activate = true;
                }
            }
            return activate;
        }

        function containsLatex(node) {
            // Only proceed if the node is a text or element node
            if (node && (node.nodeType === Node.TEXT_NODE || node.nodeType === Node.ELEMENT_NODE)) {
                const text = node.textContent.trim();

                // Check if the entire text starts and ends with LaTeX delimiters
                if (
                    (text.startsWith("\\(") && text.endsWith("\\)")) ||
                    (text.startsWith("\\[") && text.endsWith("\\]"))
                ) {
                    return true;
                }

                // Check if it contains any valid LaTeX-delimited expression inside the text
                const inlineMathRegex = /\\\(.+?\\\)/;
                const displayMathRegex = /\\\[.+?\\\]/;

                if (inlineMathRegex.test(text) || displayMathRegex.test(text)) {
                    return true;
                }
            }

            // Return false if no LaTeX delimiters are found
            return false;
        }


        function openLatexEditor() {
            const selection = editor.selection.getNode();
            let oldFormula = isOldFormula(selection);
            if (oldFormula == true) {
                editor.windowManager.confirm(_('That content was created using the old formula editor.') + "\n" + _('Make it compatible with the new editor?'), function(s) {
                    if (s) {
                        var content = $(selection).text();
                        if (
                            (content.startsWith("\\(") && content.endsWith("\\)")) ||
                            (content.startsWith("\\[") && content.endsWith("\\]"))
                        ) {
                            $(selection).before(content).remove();
                            editor.windowManager.alert(_('Done! Please select the LaTeX code that you want to edit.'));
                        } else {
                            editor.windowManager.alert(_('Sorry, but the formula is not compatible with this editor.'));
                        }
                    }
                });
                return false;
            } else if (oldFormula == "incompatible") {
                editor.windowManager.alert(_('Sorry, but the formula is not compatible with this editor.'));
                return false;
            }
            const sel = editor.selection.getContent({
                format: 'text'
            }).trim();
            const url = editorURL + (sel ? '?sel=' + encodeURIComponent(sel) : '');
            editor.windowManager.openUrl({
                title: 'EdiCuaTeX',
                url,
                width: 900,
                height: 600,
                buttons: []
            });
            // Warning (select to edit)
            if (sel == '' && containsLatex(selection)) {
                editor.windowManager.alert(_('If you want to edit a previous code, please select it before opening the editor.'));
            }
        }

        editor.ui.registry.addButton('edicuatex', {
            icon: 'edicuatex',
            tooltip: _('Insert/Edit math'),
            onAction: openLatexEditor
        });

        editor.ui.registry.addMenuItem('edicuatex', {
            icon: 'edicuatex',
            text: _('Insert/Edit math'),
            onAction: openLatexEditor
        });

        editor.on('init', function(e) {
            editor.dom.loadCSS(url + "/css/content.css");
        });

        return {
            getMetadata: function() {
                return {
                    name: 'EdiCuaTeX'
                };
            }
        };
    });
})();