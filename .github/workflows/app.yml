name: Build Desktop Installers

on:
  release:
    types: [prereleased]

jobs:
  package:
    if: ${{ github.event.release.target_commitish == 'main' }}  # only main preâ€‘releases    
    permissions:
      contents: write

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Node.js and npm
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'  # Use the version you need

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: sodium, fileinfo, zip, mbstring

      # TODO: Temporary disabled because we must have an account in snapcraft.io,
      #  when we release the app we should edit packages.json to add
      # to add
      #     "build": {
      #         "snap": {
      #             "grade": "stable",
      #             "confinement": "strict",
      #             "plugs": ["network", "home", "removable-media"],
      #             "publish": false
      #         },        
      #         "linux": {
      #             "target": [
      #                  ...
      #                 { "target": "snap", "arch": ["x64"] }
      # # Install Snapcraft only in Ubuntu
      # - name: Install Snapcraft
      #   if: matrix.os == 'ubuntu-latest'
      #   run: |
      #     sudo snap install snapcraft --classic

      # Install composer dependencies
      - name: Install composer dependencies
        run: composer install --optimize-autoloader --no-interaction --no-progress

      # Extract version from tag
      - name: Get version from tag
        id: get_version
        shell: bash
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      # Install Make on Windows
      - name: Install Make on Windows
        if: matrix.os == 'windows-latest'
        run: choco install make
        shell: pwsh

      # Use the Makefile to install the nativephp/php pacakge
      - name: Install nativephp using Makefile
        run: |
          make install-php-bin
        shell: bash

      # Remove unnecessary PHP versions on each platform
      - name: Remove unnecessary PHP versions (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          rm -f vendor/nativephp/php-bin/bin/linux/x64/php-8.1.zip
          rm -f vendor/nativephp/php-bin/bin/linux/x64/php-8.2.zip
          rm -rf vendor/nativephp/php-bin/bin/mac
          rm -rf vendor/nativephp/php-bin/bin/win

      - name: Remove unnecessary PHP versions (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          rm -f vendor/nativephp/php-bin/bin/mac/arm64/php-8.1.zip
          rm -f vendor/nativephp/php-bin/bin/mac/arm64/php-8.2.zip
          rm -f vendor/nativephp/php-bin/bin/mac/x86/php-8.1.zip
          rm -f vendor/nativephp/php-bin/bin/mac/x86/php-8.2.zip
          rm -rf vendor/nativephp/php-bin/bin/linux
          rm -rf vendor/nativephp/php-bin/bin/win

      - name: Remove unnecessary PHP versions (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          rm -f vendor/nativephp/php-bin/bin/win/x64/php-8.1.zip
          rm -f vendor/nativephp/php-bin/bin/win/x64/php-8.2.zip
          rm -rf vendor/nativephp/php-bin/bin/mac
          rm -rf vendor/nativephp/php-bin/bin/linux          

      - name: Decode Windows certificate
        if: matrix.os == 'windows-latest'
        run: |
          echo "${{ secrets.CERT_P12 }}" | base64 --decode > windows-cert.pfx
        shell: bash

      # Use the Makefile package target
      - name: Package application using Makefile
        env:
          # GitHub Releases API token for electron-builder
          # TO-DO Change for this other lines when release the code in the exelearning/exelearning repo
          # GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.EXELEARNING_GH_TOKEN || secrets.GITHUB_TOKEN }}
          WIN_CSC_LINK: ./windows-cert.pfx
          WIN_CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}

        run: |
          # Run the package command with the version
          make package VERSION=${{ steps.get_version.outputs.version }}  PUBLISH=always
        shell: bash

      - name: VirusTotal Scan
        uses: crazy-max/ghaction-virustotal@v4
        with:
          vt_api_key: ${{ secrets.VT_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          update_release_body: true
          files: |
            .msi$
            .exe$
            .dmg$
            .deb$
            .rpm$
            .zip$
