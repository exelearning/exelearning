# config/packages/security.yaml

security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\net\exelearning\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            # lazy: true

            # Disable security (login) if offline mode (APP_ONLINE_MODE=false)
            security: '%app.online_mode%'

            provider: app_user_provider

            form_login:
                username_parameter: email
                password_parameter: password
                login_path: app_login
                check_path: app_login_check
                enable_csrf: false # csrf is not working on prod
                use_referer: true
                default_target_path: workarea

            access_token:
                token_handler: App\Security\MultiTokenHandler

                token_extractors:
                    - security.access_token_extractor.cas
                    - security.access_token_extractor.query_string

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            logout:
                path: app_logout
                # where to redirect after logout
                target: app_logout_redirect
                # Prevent losing some session values before exit
                invalidate_session: false


            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

        # Check that user is logged in
        - { path: '^/admin', roles: [IS_AUTHENTICATED_FULLY] }
        - { path: '^/workarea', roles: [IS_AUTHENTICATED_FULLY] }
        - { path: '^/api', roles: [IS_AUTHENTICATED_FULLY] }
        - { path: ^/apiRest/users, roles: ROLE_ADMIN } 

        # api path can be accesed without being authenticated
        #- { path: '^/api', roles: [IS_AUTHENTICATED_ANONYMOUSLY] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon